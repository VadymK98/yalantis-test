{"version":3,"sources":["components/EmployeePanel.js","components/EmployeesList.js","components/ActiveEmployees.js","logic/alphabetizeEmployees.js","logic/sortEmployeesByDOB.js","App.js","logic/sortEmployees.js","reportWebVitals.js","index.js"],"names":["EmployeePanel","fullName","isActive","setEmployeeStatus","className","onChange","e","target","value","type","name","defaultChecked","EmployeesList","employees","Object","entries","map","key","length","id","ActiveEmployees","isEmpty","bdDate","alphabetizeEmployees","employeesAlphabetized","forEach","letter","lastName","firstName","firstLetter","employeeObj","push","sortEmployeesByDOB","months","employeesSorted","month","dob","dobObj","Date","getMonth","day","getDay","year","getYear","App","useState","error","setError","isLoaded","setIsLoaded","setEmployees","useEffect","savedState","JSON","parse","localStorage","getItem","fetch","then","res","json","result","sort","employee1","employee2","employee","sortEmployees","setItem","stringify","message","newData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd6a7000.chunk.js","sourcesContent":["import '../style/EmployeePanel.css';\n\nexport default function EmployeePanel({\n  fullName,\n  isActive,\n  setEmployeeStatus,\n}) {\n  function handleChange(e) {\n    const isActive = e.target.value === \"active\" ? true : false;\n    setEmployeeStatus(isActive);\n  }\n\n  return (\n    <div className=\"EmployeePanel\">\n      <h5>{fullName}</h5>\n      <div className=\"RadioButtons\" onChange={handleChange}>\n        <div>\n          <input\n            value=\"active\"\n            type=\"radio\"\n            name={`${fullName} status`}\n            defaultChecked={isActive}\n          />{\" \"}\n          Active\n        </div>\n        <div>\n          <input\n            value=\"inactive\"\n            type=\"radio\"\n            name={`${fullName} status`}\n            defaultChecked={!isActive}\n          />{\" \"}\n          Inactive\n        </div>\n      </div>\n    </div>\n  );\n}\n","import EmployeePanel from \"./EmployeePanel\";\nimport \"../style/EmployeesList.css\";\n\nexport default function EmployeesList({ employees, setEmployeeStatus }) {\n  return (\n    <div className=\"LeftWrapper\">\n      <h2>Employees</h2>\n      <div className=\"EmployeesList\">\n        {Object.entries(employees).map(([key, value]) => (\n          <div key={key}>\n            <h3>{key}</h3>\n            <div className=\"LetterDisplay\">\n              {value.length !== 0 ? (\n                value.map(({ id, fullName, isActive }) => (\n                  <EmployeePanel\n                    key={id}\n                    fullName={fullName}\n                    isActive={isActive}\n                    setEmployeeStatus={setEmployeeStatus(id)}\n                  />\n                ))\n              ) : (\n                <p> ---- </p>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"../style/ActiveEmployees.css\";\n\nexport default function ActiveEmployees({ employees }) {\n  let isEmpty = true;\n  return (\n    <div className=\"RigthWrapper\">\n      <h2 className=\"hello\">Active employees</h2>\n      <div className=\"ActiveEmployees\">\n        {Object.entries(employees).map(([key, value]) => {\n          if (value.length !== 0) {\n            if (isEmpty) {\n              isEmpty = false;\n            }\n            return (\n              <div className=\"MonthDisplay\" key={key}>\n                <h3>{key}</h3>\n                {value.map(({ fullName, bdDate, id }) => (\n                  <div className=\"ActiveEmployeePanel\" key={`active-${id}`}>\n                    {`${fullName} - ${bdDate}`}\n                  </div>\n                ))}\n              </div>\n            );\n          } else { return ''; }\n        })}\n        {\n          isEmpty ? <p>Employees list is empty</p> : ''\n        }\n      </div>\n    </div>\n  );\n}\n","export default function alphabetizeEmployees(employees) {\n  const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let employeesAlphabetized = {};\n\n  [...alphabet].forEach((letter) => (employeesAlphabetized[letter] = []));\n  employees.forEach(function ({ lastName, firstName, id, isActive }) {\n    const firstLetter = lastName[0];\n    const employeeObj = {\n      fullName: `${lastName} ${firstName}`,\n      id,\n      isActive,\n    };\n    employeesAlphabetized[firstLetter].push(employeeObj);\n  });\n  return employeesAlphabetized;\n}\n","export default function sortEmployeesByDOB(employees) {\n  const months = [\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n  ];\n  let employeesSorted = {};\n  months.forEach((month) => (employeesSorted[month] = []));\n  employees.forEach(({ lastName, firstName, dob, id, isActive }) => {\n    if (isActive) {\n      const dobObj = new Date(dob);\n      const month = months[(dobObj.getMonth() + 4) % 12];\n      const day = dobObj.getDay();\n      const year = 1900 + dobObj.getYear();\n      const employeeObj = {\n        fullName: `${lastName} ${firstName}`,\n        bdDate: `${month} ${day}, ${year}`,\n        id,\n      };\n      employeesSorted[month].push(employeeObj);\n    }\n  });\n  return employeesSorted;\n}\n","import { useState, useEffect } from \"react\";\nimport EmployeesList from \"./components/EmployeesList\";\nimport ActiveEmployees from \"./components/ActiveEmployees\";\nimport sortEmployees from \"./logic/sortEmployees\";\nimport alphabetizeEmployees from \"./logic/alphabetizeEmployees\";\nimport sortEmployeesByDOB from \"./logic/sortEmployeesByDOB\";\n\nimport \"./index.css\";\nimport \"./style/App.css\";\n\nfunction App() {\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [employees, setEmployees] = useState([]);\n\n  function setEmployeeStatus(id) {\n    return function (isActive) {\n      var newData = employees.map((employee) =>\n        employee.id === id ? { ...employee, isActive } : employee\n      );\n      setEmployees(newData);\n      localStorage.setItem(\"employees\", JSON.stringify(newData));\n    };\n  }\n\n  useEffect(() => {\n    const savedState = JSON.parse(localStorage.getItem(\"employees\"));\n    if (savedState) {\n      setEmployees(savedState);\n      setIsLoaded(true);\n    } else {\n      fetch(\"https://yalantis-react-school-api.yalantis.com/api/task0/users\")\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setIsLoaded(true);\n            const employeesSorted = sortEmployees(result);\n            setEmployees(employeesSorted);\n            localStorage.setItem(\"employees\", JSON.stringify(employeesSorted));\n          },\n          (error) => {\n            setIsLoaded(true);\n            setError(error);\n          }\n        );\n    }\n  }, []);\n\n  if (error) {\n    return (\n      <div className=\"App\">\n        <p>Error: {error.message}</p>\n      </div>\n    );\n  } else if (!isLoaded || employees.length === 0) {\n    return (\n      <div className=\"App\">\n        <p>Loading...</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <EmployeesList\n          employees={alphabetizeEmployees(employees)}\n          setEmployeeStatus={setEmployeeStatus}\n        />\n        <ActiveEmployees employees={sortEmployeesByDOB(employees)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default function sortEmployees(employees) {\n  let employeesSorted = [...employees];\n  employeesSorted.sort((employee1, employee2) =>\n    employee1.lastName < employee2.lastName ? -1 : 1\n  );\n  employeesSorted.forEach((employee) => (employee.isActive = false));\n  return employeesSorted;\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}